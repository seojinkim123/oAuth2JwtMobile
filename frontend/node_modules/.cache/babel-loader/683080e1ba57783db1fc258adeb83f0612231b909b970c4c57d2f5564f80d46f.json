{"ast":null,"code":"// 🔒 JWT 토큰 관리 유틸리티 (HTTP-Only Cookie 기반)\nexport const TokenStorage = {\n  // 🔒 HTTP-Only 쿠키는 JavaScript로 직접 설정할 수 없음\n  // 서버에서 설정되므로 이 메서드들은 더 이상 사용되지 않음\n  setAccessToken: token => {\n    console.warn('HTTP-Only 쿠키는 서버에서만 설정할 수 있습니다.');\n  },\n  setRefreshToken: token => {\n    console.warn('HTTP-Only 쿠키는 서버에서만 설정할 수 있습니다.');\n  },\n  // 🔒 HTTP-Only 쿠키는 JavaScript로 직접 읽을 수 없음\n  // API 호출을 통해 토큰 유효성을 확인해야 함\n  getAccessToken: () => {\n    console.warn('HTTP-Only 쿠키는 JavaScript로 직접 읽을 수 없습니다. API 호출로 검증하세요.');\n    return null;\n  },\n  getRefreshToken: () => {\n    console.warn('HTTP-Only 쿠키는 JavaScript로 읽을 수 없습니다.');\n    return null;\n  },\n  // 🔒 로그아웃 시 서버 API를 통해 쿠키 삭제\n  clearTokens: async () => {\n    try {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include' // 쿠키 포함\n      });\n      if (response.ok) {\n        console.log('로그아웃 성공 - 쿠키가 서버에서 삭제되었습니다.');\n        return true;\n      } else {\n        console.error('로그아웃 실패');\n        return false;\n      }\n    } catch (error) {\n      console.error('로그아웃 중 오류:', error);\n      return false;\n    }\n  },\n  // 🔒 API 호출을 통해 토큰 유효성 확인\n  hasTokens: async () => {\n    try {\n      const response = await fetch('/api/auth/verify', {\n        method: 'GET',\n        credentials: 'include' // 쿠키 포함\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('토큰 검증 중 오류:', error);\n      return false;\n    }\n  },\n  // JWT 토큰 파싱 (payload 추출)\n  parseJWT: token => {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('JWT 파싱 오류:', error);\n      return null;\n    }\n  },\n  // 토큰 만료 확인\n  isTokenExpired: token => {\n    if (!token) return true;\n    const decoded = TokenStorage.parseJWT(token);\n    if (!decoded || !decoded.exp) return true;\n    const currentTime = Date.now() / 1000;\n    return decoded.exp < currentTime;\n  }\n};","map":{"version":3,"names":["TokenStorage","setAccessToken","token","console","warn","setRefreshToken","getAccessToken","getRefreshToken","clearTokens","response","fetch","method","credentials","ok","log","error","hasTokens","parseJWT","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","isTokenExpired","decoded","exp","currentTime","Date","now"],"sources":["/Users/kimseojin/Desktop/oAuth2Jwt/frontend/src/utils/tokenStorage.js"],"sourcesContent":["// 🔒 JWT 토큰 관리 유틸리티 (HTTP-Only Cookie 기반)\nexport const TokenStorage = {\n  // 🔒 HTTP-Only 쿠키는 JavaScript로 직접 설정할 수 없음\n  // 서버에서 설정되므로 이 메서드들은 더 이상 사용되지 않음\n  setAccessToken: (token) => {\n    console.warn('HTTP-Only 쿠키는 서버에서만 설정할 수 있습니다.');\n  },\n\n  setRefreshToken: (token) => {\n    console.warn('HTTP-Only 쿠키는 서버에서만 설정할 수 있습니다.');\n  },\n\n  // 🔒 HTTP-Only 쿠키는 JavaScript로 직접 읽을 수 없음\n  // API 호출을 통해 토큰 유효성을 확인해야 함\n  getAccessToken: () => {\n    console.warn('HTTP-Only 쿠키는 JavaScript로 직접 읽을 수 없습니다. API 호출로 검증하세요.');\n    return null;\n  },\n\n  getRefreshToken: () => {\n    console.warn('HTTP-Only 쿠키는 JavaScript로 읽을 수 없습니다.');\n    return null;\n  },\n\n  // 🔒 로그아웃 시 서버 API를 통해 쿠키 삭제\n  clearTokens: async () => {\n    try {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include' // 쿠키 포함\n      });\n      \n      if (response.ok) {\n        console.log('로그아웃 성공 - 쿠키가 서버에서 삭제되었습니다.');\n        return true;\n      } else {\n        console.error('로그아웃 실패');\n        return false;\n      }\n    } catch (error) {\n      console.error('로그아웃 중 오류:', error);\n      return false;\n    }\n  },\n\n  // 🔒 API 호출을 통해 토큰 유효성 확인\n  hasTokens: async () => {\n    try {\n      const response = await fetch('/api/auth/verify', {\n        method: 'GET',\n        credentials: 'include' // 쿠키 포함\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('토큰 검증 중 오류:', error);\n      return false;\n    }\n  },\n\n  // JWT 토큰 파싱 (payload 추출)\n  parseJWT: (token) => {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('JWT 파싱 오류:', error);\n      return null;\n    }\n  },\n\n  // 토큰 만료 확인\n  isTokenExpired: (token) => {\n    if (!token) return true;\n    \n    const decoded = TokenStorage.parseJWT(token);\n    if (!decoded || !decoded.exp) return true;\n    \n    const currentTime = Date.now() / 1000;\n    return decoded.exp < currentTime;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}