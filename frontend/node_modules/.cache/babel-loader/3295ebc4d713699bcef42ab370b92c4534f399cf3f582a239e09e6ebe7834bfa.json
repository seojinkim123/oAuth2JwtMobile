{"ast":null,"code":"import axios from 'axios';\nimport { TokenStorage } from '../utils/tokenStorage';\n\n// 🔒 Axios 인스턴스 생성 (쿠키 기반)\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // 🔒 쿠키 포함하여 요청\n});\n\n// 🔒 요청 인터셉터 - HTTP-Only 쿠키 기반이므로 토큰 헤더 설정 불필요\napi.interceptors.request.use(config => {\n  // HTTP-Only 쿠키는 브라우저가 자동으로 포함하므로 별도 처리 불필요\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 🔒 응답 인터셉터 - 401 오류 시 로그인 페이지로 리다이렉트\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  var _error$response;\n  // 401 Unauthorized 오류 시 자동 로그아웃 처리\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.log('인증이 만료되었습니다. 로그인 페이지로 이동합니다.');\n\n    // 쿠키 기반이므로 서버에서 토큰 삭제 시도\n    try {\n      await TokenStorage.clearTokens();\n    } catch (logoutError) {\n      console.error('로그아웃 처리 중 오류:', logoutError);\n    }\n\n    // 메인 페이지로 리다이렉트 (로그인 상태 초기화)\n    window.location.href = '/';\n  }\n  return Promise.reject(error);\n});\n\n// API 함수들\nexport const ApiService = {\n  // 공개 API\n  hello: () => api.get('/hello'),\n  // 인증이 필요한 API\n  getCurrentUser: () => api.get('/me'),\n  getUser: id => api.get(`/user/${id}`),\n  // 토큰 관련 API\n  refreshToken: refreshToken => axios.post('http://localhost:8080/api/auth/refresh', {\n    refreshToken\n  }),\n  validateToken: token => axios.post('http://localhost:8080/api/auth/validate', {\n    token\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","TokenStorage","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","error","Promise","reject","response","_error$response","status","console","log","clearTokens","logoutError","window","location","href","ApiService","hello","get","getCurrentUser","getUser","id","refreshToken","post","validateToken","token"],"sources":["/Users/kimseojin/Desktop/oAuth2Jwt/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { TokenStorage } from '../utils/tokenStorage';\n\n// 🔒 Axios 인스턴스 생성 (쿠키 기반)\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // 🔒 쿠키 포함하여 요청\n});\n\n// 🔒 요청 인터셉터 - HTTP-Only 쿠키 기반이므로 토큰 헤더 설정 불필요\napi.interceptors.request.use(\n  (config) => {\n    // HTTP-Only 쿠키는 브라우저가 자동으로 포함하므로 별도 처리 불필요\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 🔒 응답 인터셉터 - 401 오류 시 로그인 페이지로 리다이렉트\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    // 401 Unauthorized 오류 시 자동 로그아웃 처리\n    if (error.response?.status === 401) {\n      console.log('인증이 만료되었습니다. 로그인 페이지로 이동합니다.');\n      \n      // 쿠키 기반이므로 서버에서 토큰 삭제 시도\n      try {\n        await TokenStorage.clearTokens();\n      } catch (logoutError) {\n        console.error('로그아웃 처리 중 오류:', logoutError);\n      }\n      \n      // 메인 페이지로 리다이렉트 (로그인 상태 초기화)\n      window.location.href = '/';\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// API 함수들\nexport const ApiService = {\n  // 공개 API\n  hello: () => api.get('/hello'),\n\n  // 인증이 필요한 API\n  getCurrentUser: () => api.get('/me'),\n  getUser: (id) => api.get(`/user/${id}`),\n\n  // 토큰 관련 API\n  refreshToken: (refreshToken) => \n    axios.post('http://localhost:8080/api/auth/refresh', { refreshToken }),\n  \n  validateToken: (token) => \n    axios.post('http://localhost:8080/api/auth/validate', { token }),\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,uBAAuB;;AAEpD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAT,GAAG,CAACK,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf;EACA,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;;IAE3C;IACA,IAAI;MACF,MAAMjB,YAAY,CAACkB,WAAW,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOC,WAAW,EAAE;MACpBH,OAAO,CAACN,KAAK,CAAC,eAAe,EAAES,WAAW,CAAC;IAC7C;;IAEA;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;EAC5B;EAEA,OAAOX,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMa,UAAU,GAAG;EACxB;EACAC,KAAK,EAAEA,CAAA,KAAMvB,GAAG,CAACwB,GAAG,CAAC,QAAQ,CAAC;EAE9B;EACAC,cAAc,EAAEA,CAAA,KAAMzB,GAAG,CAACwB,GAAG,CAAC,KAAK,CAAC;EACpCE,OAAO,EAAGC,EAAE,IAAK3B,GAAG,CAACwB,GAAG,CAAC,SAASG,EAAE,EAAE,CAAC;EAEvC;EACAC,YAAY,EAAGA,YAAY,IACzB9B,KAAK,CAAC+B,IAAI,CAAC,wCAAwC,EAAE;IAAED;EAAa,CAAC,CAAC;EAExEE,aAAa,EAAGC,KAAK,IACnBjC,KAAK,CAAC+B,IAAI,CAAC,yCAAyC,EAAE;IAAEE;EAAM,CAAC;AACnE,CAAC;AAED,eAAe/B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}