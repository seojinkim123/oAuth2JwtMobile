{"ast":null,"code":"import axios from 'axios';\nimport { TokenStorage } from '../utils/tokenStorage';\n\n// 🔒 Axios 인스턴스 생성 (쿠키 기반)\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // 🔒 쿠키 포함하여 요청\n});\n\n// 🔒 요청 인터셉터 - HTTP-Only 쿠키 기반이므로 토큰 헤더 설정 불필요\napi.interceptors.request.use(config => {\n  // HTTP-Only 쿠키는 브라우저가 자동으로 포함하므로 별도 처리 불필요\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 - 토큰 만료 시 자동 갱신\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = TokenStorage.getRefreshToken();\n      if (refreshToken) {\n        const response = await axios.post('http://localhost:8080/api/auth/refresh', {\n          refreshToken: refreshToken\n        });\n        const {\n          accessToken,\n          refreshToken: newRefreshToken\n        } = response.data;\n        TokenStorage.setAccessToken(accessToken);\n        TokenStorage.setRefreshToken(newRefreshToken);\n\n        // 원래 요청 재시도\n        originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      console.error('토큰 갱신 실패:', refreshError);\n      TokenStorage.clearTokens();\n      window.location.href = '/';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// API 함수들\nexport const ApiService = {\n  // 공개 API\n  hello: () => api.get('/hello'),\n  // 인증이 필요한 API\n  getCurrentUser: () => api.get('/me'),\n  getUser: id => api.get(`/user/${id}`),\n  // 토큰 관련 API\n  refreshToken: refreshToken => axios.post('http://localhost:8080/api/auth/refresh', {\n    refreshToken\n  }),\n  validateToken: token => axios.post('http://localhost:8080/api/auth/validate', {\n    token\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","TokenStorage","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","getRefreshToken","post","accessToken","newRefreshToken","data","setAccessToken","setRefreshToken","Authorization","refreshError","console","clearTokens","window","location","href","ApiService","hello","get","getCurrentUser","getUser","id","validateToken","token"],"sources":["/Users/kimseojin/Desktop/oAuth2Jwt/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { TokenStorage } from '../utils/tokenStorage';\n\n// 🔒 Axios 인스턴스 생성 (쿠키 기반)\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // 🔒 쿠키 포함하여 요청\n});\n\n// 🔒 요청 인터셉터 - HTTP-Only 쿠키 기반이므로 토큰 헤더 설정 불필요\napi.interceptors.request.use(\n  (config) => {\n    // HTTP-Only 쿠키는 브라우저가 자동으로 포함하므로 별도 처리 불필요\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터 - 토큰 만료 시 자동 갱신\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = TokenStorage.getRefreshToken();\n        if (refreshToken) {\n          const response = await axios.post('http://localhost:8080/api/auth/refresh', {\n            refreshToken: refreshToken\n          });\n\n          const { accessToken, refreshToken: newRefreshToken } = response.data;\n          TokenStorage.setAccessToken(accessToken);\n          TokenStorage.setRefreshToken(newRefreshToken);\n\n          // 원래 요청 재시도\n          originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        console.error('토큰 갱신 실패:', refreshError);\n        TokenStorage.clearTokens();\n        window.location.href = '/';\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// API 함수들\nexport const ApiService = {\n  // 공개 API\n  hello: () => api.get('/hello'),\n\n  // 인증이 필요한 API\n  getCurrentUser: () => api.get('/me'),\n  getUser: (id) => api.get(`/user/${id}`),\n\n  // 토큰 관련 API\n  refreshToken: (refreshToken) => \n    axios.post('http://localhost:8080/api/auth/refresh', { refreshToken }),\n  \n  validateToken: (token) => \n    axios.post('http://localhost:8080/api/auth/validate', { token }),\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,uBAAuB;;AAEpD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAT,GAAG,CAACK,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACD,MAAM;EAEpC,IAAI,EAAAK,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF,MAAMC,YAAY,GAAGlB,YAAY,CAACmB,eAAe,CAAC,CAAC;MACnD,IAAID,YAAY,EAAE;QAChB,MAAML,QAAQ,GAAG,MAAMd,KAAK,CAACqB,IAAI,CAAC,wCAAwC,EAAE;UAC1EF,YAAY,EAAEA;QAChB,CAAC,CAAC;QAEF,MAAM;UAAEG,WAAW;UAAEH,YAAY,EAAEI;QAAgB,CAAC,GAAGT,QAAQ,CAACU,IAAI;QACpEvB,YAAY,CAACwB,cAAc,CAACH,WAAW,CAAC;QACxCrB,YAAY,CAACyB,eAAe,CAACH,eAAe,CAAC;;QAE7C;QACAP,eAAe,CAACX,OAAO,CAACsB,aAAa,GAAG,UAAUL,WAAW,EAAE;QAC/D,OAAOpB,GAAG,CAACc,eAAe,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOY,YAAY,EAAE;MACrBC,OAAO,CAAClB,KAAK,CAAC,WAAW,EAAEiB,YAAY,CAAC;MACxC3B,YAAY,CAAC6B,WAAW,CAAC,CAAC;MAC1BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC5B;EACF;EAEA,OAAOrB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMuB,UAAU,GAAG;EACxB;EACAC,KAAK,EAAEA,CAAA,KAAMjC,GAAG,CAACkC,GAAG,CAAC,QAAQ,CAAC;EAE9B;EACAC,cAAc,EAAEA,CAAA,KAAMnC,GAAG,CAACkC,GAAG,CAAC,KAAK,CAAC;EACpCE,OAAO,EAAGC,EAAE,IAAKrC,GAAG,CAACkC,GAAG,CAAC,SAASG,EAAE,EAAE,CAAC;EAEvC;EACApB,YAAY,EAAGA,YAAY,IACzBnB,KAAK,CAACqB,IAAI,CAAC,wCAAwC,EAAE;IAAEF;EAAa,CAAC,CAAC;EAExEqB,aAAa,EAAGC,KAAK,IACnBzC,KAAK,CAACqB,IAAI,CAAC,yCAAyC,EAAE;IAAEoB;EAAM,CAAC;AACnE,CAAC;AAED,eAAevC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}