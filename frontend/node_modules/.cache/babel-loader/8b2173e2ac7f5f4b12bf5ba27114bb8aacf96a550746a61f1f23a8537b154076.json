{"ast":null,"code":"// JWT 토큰 관리 유틸리티\nexport const TokenStorage = {\n  // 액세스 토큰 저장\n  setAccessToken: token => {\n    localStorage.setItem('accessToken', token);\n  },\n  // 리프레시 토큰 저장\n  setRefreshToken: token => {\n    localStorage.setItem('refreshToken', token);\n  },\n  // 액세스 토큰 조회\n  getAccessToken: () => {\n    return localStorage.getItem('accessToken');\n  },\n  // 리프레시 토큰 조회\n  getRefreshToken: () => {\n    return localStorage.getItem('refreshToken');\n  },\n  // 모든 토큰 삭제\n  clearTokens: () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  },\n  // 토큰 존재 여부 확인\n  hasTokens: () => {\n    return !!(localStorage.getItem('accessToken') && localStorage.getItem('refreshToken'));\n  },\n  // JWT 토큰 파싱 (payload 추출)\n  parseJWT: token => {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('JWT 파싱 오류:', error);\n      return null;\n    }\n  },\n  // 토큰 만료 확인\n  isTokenExpired: token => {\n    if (!token) return true;\n    const decoded = TokenStorage.parseJWT(token);\n    if (!decoded || !decoded.exp) return true;\n    const currentTime = Date.now() / 1000;\n    return decoded.exp < currentTime;\n  }\n};","map":{"version":3,"names":["TokenStorage","setAccessToken","token","localStorage","setItem","setRefreshToken","getAccessToken","getItem","getRefreshToken","clearTokens","removeItem","hasTokens","parseJWT","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","console","isTokenExpired","decoded","exp","currentTime","Date","now"],"sources":["/Users/kimseojin/Desktop/oAuth2Jwt/frontend/src/utils/tokenStorage.js"],"sourcesContent":["// JWT 토큰 관리 유틸리티\nexport const TokenStorage = {\n  // 액세스 토큰 저장\n  setAccessToken: (token) => {\n    localStorage.setItem('accessToken', token);\n  },\n\n  // 리프레시 토큰 저장\n  setRefreshToken: (token) => {\n    localStorage.setItem('refreshToken', token);\n  },\n\n  // 액세스 토큰 조회\n  getAccessToken: () => {\n    return localStorage.getItem('accessToken');\n  },\n\n  // 리프레시 토큰 조회\n  getRefreshToken: () => {\n    return localStorage.getItem('refreshToken');\n  },\n\n  // 모든 토큰 삭제\n  clearTokens: () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  },\n\n  // 토큰 존재 여부 확인\n  hasTokens: () => {\n    return !!(localStorage.getItem('accessToken') && localStorage.getItem('refreshToken'));\n  },\n\n  // JWT 토큰 파싱 (payload 추출)\n  parseJWT: (token) => {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('JWT 파싱 오류:', error);\n      return null;\n    }\n  },\n\n  // 토큰 만료 확인\n  isTokenExpired: (token) => {\n    if (!token) return true;\n    \n    const decoded = TokenStorage.parseJWT(token);\n    if (!decoded || !decoded.exp) return true;\n    \n    const currentTime = Date.now() / 1000;\n    return decoded.exp < currentTime;\n  }\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG;EAC1B;EACAC,cAAc,EAAGC,KAAK,IAAK;IACzBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,KAAK,CAAC;EAC5C,CAAC;EAED;EACAG,eAAe,EAAGH,KAAK,IAAK;IAC1BC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,KAAK,CAAC;EAC7C,CAAC;EAED;EACAI,cAAc,EAAEA,CAAA,KAAM;IACpB,OAAOH,YAAY,CAACI,OAAO,CAAC,aAAa,CAAC;EAC5C,CAAC;EAED;EACAC,eAAe,EAAEA,CAAA,KAAM;IACrB,OAAOL,YAAY,CAACI,OAAO,CAAC,cAAc,CAAC;EAC7C,CAAC;EAED;EACAE,WAAW,EAAEA,CAAA,KAAM;IACjBN,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC;IACtCP,YAAY,CAACO,UAAU,CAAC,cAAc,CAAC;EACzC,CAAC;EAED;EACAC,SAAS,EAAEA,CAAA,KAAM;IACf,OAAO,CAAC,EAAER,YAAY,CAACI,OAAO,CAAC,aAAa,CAAC,IAAIJ,YAAY,CAACI,OAAO,CAAC,cAAc,CAAC,CAAC;EACxF,CAAC;EAED;EACAK,QAAQ,EAAGV,KAAK,IAAK;IACnB,IAAI;MACF,MAAMW,SAAS,GAAGX,KAAK,CAACY,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;MAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACD,KAAK,CAAC,EAAE,CAAC,CAACM,GAAG,CAAC,UAASC,CAAC,EAAE;QAC5E,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9D,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;MACZ,OAAOC,IAAI,CAACC,KAAK,CAACV,WAAW,CAAC;IAChC,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,OAAO,IAAI;IACb;EACF,CAAC;EAED;EACAE,cAAc,EAAG5B,KAAK,IAAK;IACzB,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;IAEvB,MAAM6B,OAAO,GAAG/B,YAAY,CAACY,QAAQ,CAACV,KAAK,CAAC;IAC5C,IAAI,CAAC6B,OAAO,IAAI,CAACA,OAAO,CAACC,GAAG,EAAE,OAAO,IAAI;IAEzC,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACrC,OAAOJ,OAAO,CAACC,GAAG,GAAGC,WAAW;EAClC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}